@using ASTE.Modules.APIDiscovery.db.Entities
@model Module
@{
    var ctx = new ASTE.Modules.APIDiscovery.db.Context.APIDiscoveryContext();
    ViewBag.Title = "Edit Module";
}
<div class="row">
    
        <h2>Edit module</h2>
    @if (TempData["error"] != null)
    {
        <p style="color:red;">
            @TempData["error"].ToString()
        </p>
    }
        @using (Html.BeginForm("Update", "Module", FormMethod.Post))
        {
            @Html.HiddenFor(x => Model.id)
            @Html.HiddenFor(x => Model.created)
            <table cellpadding="5">
                <tr>
                    <td>@Html.LabelFor(x => Model.guid)</td>
                    <td>@Html.DisplayFor(x => Model.guid) @Html.HiddenFor(x => Model.guid)</td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => Model.name)</td>
                    <td>@Html.DisplayFor(x => Model.name) @Html.HiddenFor(x => Model.name)</td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => Model.version)</td>
                    <td>@Html.DisplayFor(x => Model.version) @Html.HiddenFor(x => Model.version)
                    <td>
                </tr>
                @if (ViewData.ModelState != null && ViewData.ModelState["api_url"] != null && ViewData.ModelState["api_url"].Errors.Count > 0)
                {
                    <tr>
                        <td colspan="2" style="color:red;">@Html.ValidationMessageFor(x => Model.api_url)</td>
                    </tr>
                }
                <tr>
                    <td>@Html.LabelFor(x => Model.api_url)</td>
                    <td>@Html.EditorFor(x => Model.api_url)</td>
                </tr>

                @if (ViewData.ModelState != null && ViewData.ModelState["active"] != null && ViewData.ModelState["active"].Errors.Count > 0)
                {
                    <tr>
                        <td colspan="2" style="color:red;">@Html.ValidationMessageFor(x => Model.active)</td>
                    </tr>
                }

                <tr>
                    <td>@Html.LabelFor(x => Model.active)</td>
                    <td>@Html.EditorFor(x => Model.active)</td>
                </tr>

                <tr>
                    <td>@Html.LabelFor(x => Model.author)</td>
                    <td>@Html.DisplayFor(x => Model.author) @Html.HiddenFor(x => Model.author)</td>
                </tr>

                <tr>
                    <td>@Html.LabelFor(x => Model.authorContact)</td>
                    <td>@Html.DisplayFor(x => Model.authorContact) @Html.HiddenFor(x => Model.authorContact)</td>
                </tr>
                <tr>
                    <td>@Html.LabelFor(x => Model.description)</td>
                    <td>@Html.DisplayFor(x => Model.description) @Html.HiddenFor(x => Model.description)</td>
                </tr>
                <tr>
                    <td>
                        <label style="font-weigh:bold">dependency</label>
                    </td>
                    <td>
                        @Html.DropDownList("module_list", new SelectList(ctx.modules.Where(x => !x.isdeleted), "id", "name"))
                        <a href="#" class="btn btn-default" id="new_dependency">Add</a>
                    </td>
                </tr>
                @if(Model.my_dependencies != null && Model.my_dependencies.Where(x => !x.isdeleted).ToList().Count > 0)
                {
                    <tr>
                        <td colspan="2">
                            <h3>Dependencies</h3>
                            <br />
                            <table cellpadding="5">
                                @foreach(var d in Model.my_dependencies.Where(x => !x.isdeleted))
                                {
                                    <tr>
                                        <td>
                                            @d.dependency.name
                                        </td>
                                        <td>
                                            <a href="#" class="btn btn-default deleteDependency" data-dependency="@d.id">Delete</a>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>
                }
                @if (Model.methods != null && Model.methods.Where(x => !x.isdeleted).ToList().Count > 0)
                {
                    <tr>
                        <td colspan="2">
                            <h3>Methods</h3>
                            <br />
                            <table cellpadding="5">
                                @foreach (var m in Model.methods.Where(x => !x.isdeleted))
                                {
                                    <tr>
                                        <td>
                                            Method:
                                        </td>
                                        <td>
                                            @m.name
                                        </td>
                                        <td>
                                            <a href="#" class="btn btn-default deleteMethod" data-method="@m.id">Delete</a>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <label style="font-weigh:bold">New Method</label>
                    </td>
                    <td>
                        <input type="text" value="Method name" id="method_text" />
                        <a href="#" class="btn btn-default" id="new_method">Add</a>
                    </td>
                </tr>
            </table>
            <input class="btn btn-default" type="submit" value="Update" />
        }
</div>

<script>
    $(document).ready(function () {

        $("#new_dependency").click(function () {
            var selected_dependency = $("#module_list").val();
            window.location = "/Module/AddDependency?module_id=@Model.id&dependency_id=" + selected_dependency
        });

        $("#new_method").click(function () {
            var module_name = $("#method_text").val();
            window.location = "/Module/AddMethod?module_id=@Model.id&method_name=" + module_name
        });

        $(".deleteDependency").each(function () {
            var data = $(this).data('dependency')
            $(this).click(function () {
                window.location = "/Module/DeleteDependency?dependency_id=" + data;
            });

        });
        $(".deleteMethod").each(function () {
            var data = $(this).data('method')
            $(this).click(function () {
                window.location = "/Module/DeleteMethod?method_id=" + data;
            });

        });
    });

</script>